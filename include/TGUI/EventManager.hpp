/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// TGUI - Texus's Graphical User Interface
// Copyright (C) 2012 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef TGUI_EVENT_MANAGER_HPP
#define TGUI_EVENT_MANAGER_HPP

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace tgui
{
    template <class T>
    class SharedObjectPtr;

    class Object;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //  Keeps track of all objects and passes the events to them.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class TGUI_API EventManager : public sf::NonCopyable
    {
      public:

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // The default constructor.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        EventManager();


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // When this function is called then all the objects receive the event (if there are objects).
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void handleEvent(sf::Event& event);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // You can use this function to change the focus to another object.
        // You cannot manually call this function. You should call the focus function from the object's parent instead.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void focusObject(Object *const object);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Unfocus the given object.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void unfocusObject(Object *const object);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Unfocus all the objects.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void unfocusAllObjects();


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Places an object before all other objects.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void updateTime(const sf::Time& elapsedTime);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // When the tab key is pressed then this function is called. The focus will move to the next object (if there is one).
        // This function will only work when tabKeyUsageEnabled is true.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void tabKeyPressed();


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Checks above which object the mouse is standing.
        // The object can be signaled through Objects[ObjectNr] on condition that this function returned true.
        //
        // return:  true when the mouse is standing on an object
        //          false if the mouse isn't on any object
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual bool mouseOnObject(unsigned int& objectNr, float x, float y);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Tells all the objects that the mouse is not on top of them.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void mouseNotOnObject();


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Tells all the objects that the mouse is no longer down.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void mouseNoLongerDown();


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // This function is similar to the tabKeyPressed function.
        // The difference is that this function will return false and unfocus all objects when the last object was focused.
        // The tabKeyPressed function on the other hand would just focus the first object.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual bool focusNextObject();


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      protected:

        // This vector will hold all objects
        std::vector< SharedObjectPtr<Object> > m_Objects;

        // The id of the focused object
        unsigned int m_FocusedObject;

        // A pointer to the class that owns the event manager (NULL when it is the window)
        Object* m_Parent;

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        // The event handler can only be used by group objects and by the window
        friend class Grid;
        friend class Group;
        friend class GroupObject;
        friend class Panel;

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // TGUI_EVENT_MANAGER_HPP

