/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// TGUI - Texus' Graphical User Interface
// Copyright (C) 2012-2020 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef TGUI_BACKEND_HPP
#define TGUI_BACKEND_HPP

#include <TGUI/Cursor.hpp>
#include <SFML/Window/Cursor.hpp>
#include <memory>
#include <cassert>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace tgui
{
    class Gui;
    class BackendBase;
    class RenderTargetBase;
    class RenderTargetSFML;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Changes the global backend
    ///
    /// This function is automatically called when the first Gui object is created. When all Gui objects have been destructed,
    /// this function will be called again with a nullptr as parameter to destroy all global resources.
    ///
    /// If you want to use TGUI functionality before creating a Gui object then you should call this function directly.
    ///
    /// @warning When calling the function directly, it has to be the first call to TGUI and you must call setBackend(nullptr)
    ///          before the end of the main() function.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void setBackend(std::shared_ptr<BackendBase> backend);


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Returns the global backend
    ///
    /// @return Global backend
    ///
    /// A nullptr will be returned if no backend has been created yet or after it has been destroyed.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    std::shared_ptr<BackendBase> getBackend();


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Base class for the backend
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class TGUI_API BackendBase
    {
    public:

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Default constructor
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        BackendBase() = default;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // The object cannot be copied
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        BackendBase(const BackendBase&) = delete;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // The object cannot be copied
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        BackendBase& operator=(const BackendBase&) = delete;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Virtual destructor
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual ~BackendBase() = default;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Informs the backend whether it should destroy itself when the last Gui is detached from it.
        ///
        /// @param destroyOnDetatch  Should setBackend(nullptr) be called when there are no more Gui objects left?
        ///
        /// This function will be called with "true" as parameter if the Backend is created by a Gui object.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void setDestroyOnLastGuiDetatch(bool destroyOnDetatch);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Informs the backend that a new gui object has been created.
        /// @param gui  Newly created gui
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void attachGui(Gui* gui) = 0;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Informs the backend that a gui object is being destroyed.
        /// @param gui  Gui object that is about to be deconstructed
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void detatchGui(Gui* gui) = 0;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Changes the look of a certain mouse cursor by using a bitmap
        ///
        /// @param type    Cursor that should make use of the bitmap
        /// @param pixels  Pointer to an array with 4*size.x*size.y elements, representing the pixels in 32-bit RGBA format
        /// @param size    Size of the cursor
        /// @param hotspot Pixel coordinate within the cursor image which will be located exactly at the mouse pointer position
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void setMouseCursorStyle(Cursor::Type type, const std::uint8_t* pixels, Vector2u size, Vector2u hotspot) = 0;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Changes the look of a certain mouse cursor back to the system theme
        ///
        /// @param type  Cursor that should no longer use a custom bitmap
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void resetMouseCursorStyle(Cursor::Type type) = 0;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Changes the mouse cursor when the mouse is on top of the window to which the gui is attached
        ///
        /// @param gui   The gui that represents the window for which the mouse cursor should be changed
        /// @param type  Which cursor to use
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void setMouseCursor(Gui* gui, Cursor::Type type) = 0;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    protected:

        bool m_destroyOnLastGuiDetatch = false;
    };


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// @brief Backend that uses SFML
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    class TGUI_API BackendSFML : public BackendBase
    {
    public:

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Informs the backend that a new gui object has been created.
        /// @param gui  Newly created gui
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void attachGui(Gui* gui) override;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Informs the backend that a gui object is being destroyed.
        /// @param gui  Gui object that is about to be deconstructed
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void detatchGui(Gui* gui) override;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Changes the look of a certain mouse cursor by using a bitmap
        ///
        /// @param type    Cursor that should make use of the bitmap
        /// @param pixels  Pointer to an array with 4*size.x*size.y elements, representing the pixels in 32-bit RGBA format
        /// @param size    Size of the cursor
        /// @param hotspot Pixel coordinate within the cursor image which will be located exactly at the mouse pointer position
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void setMouseCursorStyle(Cursor::Type type, const std::uint8_t* pixels, Vector2u size, Vector2u hotspot) override;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Changes the look of a certain mouse cursor back to the system theme
        ///
        /// @param type  Cursor that should no longer use a custom bitmap
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void resetMouseCursorStyle(Cursor::Type type) override;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Changes the mouse cursor when the mouse is on top of the window to which the gui is attached
        ///
        /// @param gui   The gui that represents the window for which the mouse cursor should be changed
        /// @param type  Which cursor to use
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void setMouseCursor(Gui* gui, Cursor::Type type) override;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// @brief Sets the SFML target to which the gui will render and returns a new render target object to interact with
        ///
        /// @param gui     The gui for which the render target should be created
        /// @param target  SFML render target to draw on
        ///
        /// @return Render target that abstracts the SFML drawing code
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        std::shared_ptr<RenderTargetSFML> setGuiTarget(Gui* gui, sf::RenderTarget& target);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private:

        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Helper function to create a system cursor
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        std::unique_ptr<sf::Cursor> createSystemCursor(Cursor::Type type);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Helper function to update the mouse cursors on all attached guis
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void updateMouseCursor(Cursor::Type type, std::unique_ptr<sf::Cursor> cursor);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Helper function to update the mouse cursor on a window
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        void updateMouseCursor(sf::Window* window, Cursor::Type type);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private:
        struct GuiResources
        {
            sf::Window* window = nullptr;
            Cursor::Type mouseCursor = Cursor::Type::Arrow;
        };

        std::map<Gui*, GuiResources> m_guis;
        std::map<Cursor::Type, std::unique_ptr<sf::Cursor>> m_mouseCursors;
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // TGUI_BACKEND_HPP
