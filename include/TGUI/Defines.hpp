/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// TGUI - Texus's Graphical User Interface
// Copyright (C) 2012-2013 Bruno Van de Velde (vdv_b@tgui.eu)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef TGUI_DEFINES_HPP
#define TGUI_DEFINES_HPP

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <string>
#include <sstream>

#include <SFML/Graphics.hpp>

#include <TGUI/Config.hpp>
#include <TGUI/Vectors.hpp>

#include <TGUI/TextureManager.hpp>

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef TGUI_OUTPUT
    #define TGUI_OUTPUT(x)   sf::err() << x << std::endl;
#endif

#define TGUI_MINIMUM(x, y)   (x < y) ? x : y

#define TGUI_MAXIMUM(x, y)   (x > y) ? x : y

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace tgui
{
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    template <typename T>
    std::string to_string(T value)
    {
        std::ostringstream oss;
        oss << value;
        return oss.str();
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    enum ObjectPhase
    {
        ObjectPhase_Hover     = 1,
        ObjectPhase_MouseDown = 2,
        ObjectPhase_Focused   = 4,
        ObjectPhase_Selected  = 8
    };


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// \brief A list of all object types.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    enum ObjectTypes
    {
        Type_Unknown,
        Type_ClickableObject,
        Type_Picture,
        Type_Button,
        Type_Checkbox,
        Type_RadioButton,
        Type_Label,
        Type_EditBox,
        Type_ListBox,
        Type_ComboBox,
        Type_Slider,
        Type_Scrollbar,
        Type_LoadingBar,
        Type_TextBox,
        Type_SpriteSheet,
        Type_AnimatedPicture,
        Type_SpinButton,
        Type_Slider2d,
        Type_Tab,
        Type_MenuBar,
        Type_ChatBox,
        Type_Panel,
        Type_ChildWindow,
        Type_Grid,
        Type_MessageBox
    };
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace tgui
{
    /// The texture manager will not just load the textures, but will also make sure that the textures are only loaded once.
    extern TGUI_API TextureManager TGUI_TextureManager;

    /// When disabling the tab key usage, pressing tab will no longer focus another object, but in the future this will allow to use tabs in TextBox.
    extern TGUI_API bool tabKeyUsageEnabled;


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Get a sf::Color from a string. The string must look like: "(r, g, b)" or "(r, g, b, a)".
    // When this function fails then it will return black.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    TGUI_API sf::Color extractColor(std::string string);


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // This function does exactly the opposite of extractColor.
    // The returned string will be "(r,g,b)" when a=255 or "(r,g,b,a)" when a<255.
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    TGUI_API std::string convertColorToString(const sf::Color& color);


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Get a Vector2f from a string. The string must look like: "(x, y)".
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    TGUI_API bool extractVector2f(std::string string, Vector2f& vector);


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Get a Vector2u from a string. The string must look like: "(x, y)".
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    TGUI_API bool extractVector2u(std::string string, Vector2u& vector);


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Get a Vector4u from a string. The string must look like: "(x1, x2, x3, x4)".
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    TGUI_API bool extractVector4u(std::string string, Vector4u& vector);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // TGUI_DEFINES_HPP

