/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// TGUI - Texus's Graphical User Interface
// Copyright (C) 2012 Bruno Van de Velde (VDV_B@hotmail.com)
//
// This software is provided 'as-is', without any express or implied warranty.
// In no event will the authors be held liable for any damages arising from the use of this software.
//
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it freely,
// subject to the following restrictions:
//
// 1. The origin of this software must not be misrepresented;
//    you must not claim that you wrote the original software.
//    If you use this software in a product, an acknowledgment
//    in the product documentation would be appreciated but is not required.
//
// 2. Altered source versions must be plainly marked as such,
//    and must not be misrepresented as being the original software.
//
// 3. This notice may not be removed or altered from any source distribution.
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#ifndef _TGUI_GRID_INCLUDED_
#define _TGUI_GRID_INCLUDED_


/// \todo  Add more layouts in Grid.

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace tgui
{
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    struct TGUI_API Grid : public GroupObject
    {
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief The layout of the object.
        ///
        /// Is the object drawn in the top left corner of the grid square or in the center of the grid square?
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        struct Layout
        {
            enum layouts
            {
                /// Draw the object in the top left corner of the cell
                TopLeft,

                /// Center the object in the cell
                Center

                // TODO: Add more layouts
            };
        };


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Default constructor
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Grid();


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Copy constructor
        ///
        /// \param copy  Instance to copy
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Grid(const Grid& copy);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Destructor
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual ~Grid();


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Overload of assignment operator
        ///
        /// \param right  Instance to assign
        ///
        /// \return Reference to itself
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Grid& operator= (const Grid& right);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // This function is called when the object is created (when it is added to a group).
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void initialize();


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Makes a copy of the object by calling the copy constructor.
        // This function calls new and if you use this function then you are responsible for calling delete.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual Grid* clone();


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Changes the size of the grid.
        ///
        /// By default, the grid will have the size of the objects that were added to it.
        /// When changing this size, all objects will be scaled to fit inside the grid with this fixed size.
        ///
        /// This function will change the scale factors.
        ///
        /// \param width   Sets the new width of the grid.
        /// \param height  Sets the new height of the grid.
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void setSize(float width, float height);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Returns the size of the grid, unaffected by scaling.
        ///
        /// \return Size of the grid
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual Vector2u getSize() const;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Returns the size of the grid, after the scaling transformation.
        ///
        /// \return Size of the grid
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual Vector2f getScaledSize() const;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Removes a single object that was added to the group.
        ///
        /// \param object  Pointer to an object that was added to the group with the add function.
        ///
        /// \see remove(sf::String)
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void remove(OBJECT* object);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Removes all objects that were added to the group.
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void removeAllObjects();


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Add a new object to the next column.
        ///
        /// \param object   Pointer to a fully created object that will be added to the grid.
        /// \param borders  Distance from the grid square to the object (left, top, right, bottom).
        /// \param layout   Where the object is located in the square.
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void addToRow(OBJECT* const object, const Vector4u& borders = Vector4u(0, 0, 0, 0), Layout::layouts layout = Layout::Center);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Adds a new row to the grid.
        ///
        /// \param rowHeight  The height of the row when it stays empty, or the minimum height when objects are added to the row.
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void addRow(unsigned int rowHeight = 0);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Updates the position and size of the object.
        ///
        /// After an object has been added to the grid, you will have to call this function when you change the size of the object.
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void updateObjects();


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// \brief Changes the layout of a given object.
        ///
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void changeObjectLayout(const OBJECT* const object, Layout::layouts layout = Layout::Center);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // These functions are used to receive callback from EventManager.
        // These events are send to the childs of the grid by it's own EventManager.
        // You normally don't need them, but you can use these functions to simulate an event.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual bool mouseOnObject(float x, float y);
        virtual void objectFocused();
        virtual void objectUnfocused();


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // The objects inside the grid use this function to send their callbacks.
        // This function will alert the window (or any other parent of this grid) about the callback.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void addCallback(const Callback& callback);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    protected:


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Updates the position of one of the objects.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void updatePosition(unsigned int row, unsigned int column);


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Reposition all the objects.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void updatePositionsOfAllObjects();


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        // Because this struct is derived from sf::Drawable, you can just call the draw function from your sf::RenderTarget.
        // This function will be called and it will draw the grid object on the render target.
        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    protected:

        std::vector< std::vector<OBJECT*> >  m_GridObjects;
        std::vector< std::vector<Vector4u> > m_ObjBorders;
        std::vector< std::vector<Layout::layouts> >  m_ObjLayout;

        std::vector<unsigned int> m_RowHeight;
        std::vector<unsigned int> m_ColumnWidth;

        Vector2u  m_Size;


        /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    };

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif //_TGUI_GRID_INCLUDED_
